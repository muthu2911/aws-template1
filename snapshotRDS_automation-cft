---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create manual snapshot of DB based on the db name.'
Resources:
  SnapshotRDStLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: SnapshotRDSIAMRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: "arn:aws:logs:*:*:*"
            - Effect: Allow
              Action:
              - ec2:Describe*
              Resource: "*"
            - Effect: Allow
              Action:
              - rds:CreateDBSnapshot
              - rds:DeleteDBSnapshot
              - rds:DescribeDBInstances
              - rds:DescribeDBSnapshots
              - rds:DescribeReservedDBInstances   
              Resource: "*"
      Path: "/"

  StartsnapshotRDStCreationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "A Lambda function that start te DB instance based on the cloudwatch schedule"
      Handler: index.lambda_handler
      Runtime: python2.7
      Timeout: '30'
      Role: !GetAtt SnapshotRDStLambdaIAMRole.Arn
      Code:
        ZipFile: !Sub |
          import logging
          region ='eu-west-1'
          
          instances=['dbtest']
          
          def lambda_handler(event, context):
              for instance in instances:
                   try:
                       rds_instance = boto3.client('rds', region_name=region)
                       rds_instance.start_db_instance(DBInstanceIdentifier=instance)
                       print 'stopped your instances: ' + str(instance)
                   except botocore.exceptions.ClientError as e:
                       raise Exception("Could notstop db: %s" % e)
  SnapshotRDSCreationScheduleRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Run the EBS snapshot creation script daily"
      Name: "StartRDSCreationScheduleRule"
      ScheduleExpression: "cron(0 18 * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt StartsnapshotRDStCreationFunction.Arn
          Id: 'StartsnapshotRDStCreationFunction'

  # Permissions to Lambda functions to be run from CloudWatch events
  PermissionForEventsToInvokeCreationLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref StartsnapshotRDStCreationFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt SnapshotRDSCreationScheduleRule.Arn          
 

 